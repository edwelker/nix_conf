[user]
    name = Eddie Welker
    email = welkere@ncbi.nlm.nih.gov
[core]
    # editor = /usr/bin/vim   - don't use this, use either $VISUAL or $EDITOR so it's platform independent
    pager = delta --line-numbers --dark
    whitespace = trailing-space,space-before-tab
    excludesfile = ~/.gitignore
    autocrlf = input
    eol = lf
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[alias]
    s = status
    st = status -sb
    ci = commit
    cm = commit -m
    cv = commit -v
    co = checkout
    br = branch
    bra = branch -vvra
    brl = branch -l
    brd = for-each-ref --sort=committerdate refs/heads/ --format='%(color: red)%(committerdate:short) %(color: cyan)%(refname:short)'
    rv = remote -v
    ap = add -p
    a = add
    p = pull --rebase
    w = whatchanged
    cp = cherry-pick
    ds = diff --staged
    dc = diff --cached
    push = push --tags --prune
    fetch = fetch --prune
    bpm = !"git branch --merged master | grep -v 'master$' | xargs git branch -d"
    bp = !"git branch --merged develop | grep -v 'develop$' | xargs git branch -d"
    ai = add --interactive
    ; always have to semi-colon end the commands in the braces
    t = "!f() { git tag $1 -a -m \"$1\"; }; f"
    ; b/c I always use the plural anyway
    tags = !"git tag -n1 -l --sort=v:refname | tail -n 5"
    tag = tag -a
    le = log --oneline --decorate
    undo = reset --soft HEAD^
    soft = reset --soft HEAD^
    po = "push origin"
    unstage = reset HEAD
    diffprev = diff HEAD^
    subinit = submodule update --init
    subupdate = pull --recurse-submodules
    subco = submodule foreach --recursive git checkout .
    amend = commit --amend -C HEAD

    chicken = checkout  ; because life is too short

    c = "clean -f -d -x"

    pruneremotes = remote prune origin
    bclean = "!git co develop && git branch --no-color --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    lt = describe --tags --abbrev=0
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    la = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative --graph
    lst = ls-tree
    graph = log --graph --pretty=format':%C(yellow)%h%Cblue%d%Creset %s %C(white) %an, %ar%Creset'
    yesterday = log --since '1 day ago' --oneline --author eddie.welker@gmail.com
    latest = "for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'"
    num = shortlog -sn
    aliases = "!git config -l | grep alias | cut -c 7-"
    authors = shortlog -sne --no-merges -w1024,0,0
    create-pull-request = !sh -c 'stash pull-request $0'
    home = "!cd $(git rev-parse --show-cdup)"
    root = "!pwd"
    edit-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; vim `f`"
    add-unmerged = "!f() { git diff --name-status --diff-filter=U | cut -f2 ; }; git add `f`"
    aged-branches = "!f() { git for-each-ref --sort=committerdate refs/heads $1  --format=\"%(refname:short)\" ; }; g() { for C in $(f $1) ; do git show -s --pretty=format:\"%Cgreen%ci %Cblue%cr%Creset $C\" \"$C\" -- ; done; }; g "
    churners = shortlog -sn --
    rank = shortlog -sn --no-merges


    sl = stash list --pretty=format:\"%C(red)%h%C(reset) - %C(dim yellow)(%C(bold magenta)%gd%C(dim yellow))%C(reset) %<(70,trunc)%s %C(green)(%cr) %C(bold blue)<%an>%C(reset)\"

    ; these are stolen from here: https://hackernoon.com/lesser-known-git-commands-151a1918a60#.iemxe52lc
    please = "push --force-with-lease"
    commend = "commit --amend --no-edit"
    it = "!git init && git commit -m 'root' --allow-empty"
    stsh = 'stash --keep-index'
    staash = 'stash --include-untracked'
    staaash = 'stash --all'
    merc = 'merge --no-ff'

    # STOLEN! https://gist.github.com/robmiller/6018582
    # Get the current branch name (not so useful in itself, but used in
    # other aliases)
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    # Push the current branch to the remote "origin", and set it to track
    # the upstream branch
    publish = "!git push -u origin $(git branch-name)"
    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Mark a file as "assume unchanged", which means that Git will treat it
    # as though there are no changes to it even if there are. Useful for
    # temporary changes to tracked files
    assume = update-index --assume-unchanged
    # Reverse the above
    unassume = update-index --no-assume-unchanged
    # Show the files that are currently assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    dt = difftool
[github]
    user = edwelker
    password = !security find-generic-password -gs github.password -w | tr -d '\n'
[push]
    default = current
    followTags = true
[credential]
    helper = cache --timeout=3600
[merge]
    ; tool = delta # nope, just use pager
    conflictstyle = diff3
[mergetool]
    prompt = false
[advice]
    statusHints = false
[diff]
    renames = copies
    mnemonicprefix = true
    colorMoved = default
    ; tool = delta # nope, just use pagerr
[branch]
    autosetupmerge = always
    autosetuprebase = always
[rerere]
    enabled = true
    autoUpdate = true
[fetch]
    prune = true
[pull]
    rebase = true
[rebase]
    stat = true
[difftool]
    prompt = false

# note to self, no mergetool/difftool 'delta' sections needed b/c it all just goes
# through the pager setting.
### delta section from them
[interactive]
    diffFilter = delta --color-only --features=interactive

[delta]
    features = decorations
    navigate = true

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-decoration-style = blue ol
    commit-style = raw
    file-style = omit
    hunk-header-decoration-style = blue box
    hunk-header-file-style = red
    hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax
