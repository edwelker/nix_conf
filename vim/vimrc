" to show the key mappings
" :nmap - normal mode
" :vmap - visual mode
" :imap - insert mode
" :map - some set of all? not sure.


" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible " don't need vi compatibility

source $DOTDOT/vim/plugins.vim

" remap the leader key.  typically \, but , is easier
let mapleader=","

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :w<CR>:so $MYVIMRC<CR>
nmap <silent> <leader>ep :e $DOTDOT/vim/plugins.vim<CR>
nmap <silent> <leader>sp :w<CR>:so $DOTDOT/vim/plugins.vim<CR>

" learn to do it correctly
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>


" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms") || has("mac")
  set nobackup
  " do not keep a backup file, use versions instead
  autocmd filetype crontab setlocal nobackup nowritebackup
else
  set backup            " keep a backup file

  "set a temporary directory
  set backupdir=~/.tmp

  "set where to keep swp files
  set directory=~/.tmp/swapfiles//
endif
set history=100         " keep 50 lines of command line history
set ruler               " show the cursor position all the time
set showcmd             " display incomplete commands
set incsearch           " do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


" Only do this part when compiled with support for autocommands.
if has("autocmd")

    augroup vim
            au!
            " autosource vimrc on write
            au BufWritePost .vimrc source $MYVIMRC
    augroup END

    " Enable file type detection.
    filetype on
    filetype indent plugin on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!

        " For all text files set 'textwidth' to 78 characters.
        autocmd FileType text setlocal textwidth=99

        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
    augroup END

    " whitespace characters displayed
    set list
    set listchars=tab:▸\ ,trail:.,extends:#,nbsp:.,precedes:… ",eol:¬

    " autocmd filetype html,xml set listchars-=tab:>.

else

  set autoindent " always set autoindenting on

endif " has("autocmd")

set number    "show line numbers
set encoding=utf8
set expandtab
set textwidth=0
set ai sw=4
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set ignorecase
set smartcase
" set commentstring=\ #\ %s
set hidden               " Leave hidden buffers open
set lazyredraw           " fewer redraws
set ttyfast

" set cursorline           " show where the cursor is YES, THIS MAY BE ANNOYING
set showmatch            " shows matching parens

set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

set colorcolumn=99
highlight ColorColumn ctermbg=lightgrey guibg=lightgrey

" Split settings
set splitbelow
set splitright

set wildmenu             " show graphical file list
set wildmode=longest:full,list:full
" set wildignorecase
set wildignore+=*.DS_Store,~*
set wildignore+=*.bmp,*.gif,*.jpg,*.png
set wildignore+=*/tmp/*,*.exe,*.dll,*.so,*.swp,*.zip,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/tmp/*
set wildignore+=*/.sass-cache/*,*/bower_components/*,*/node_modules/*,*/__pycache__/*,*venv*,*.tox*
" Scala
set wildignore+=*/target/*

" when wrapping, go to next editor line, not next file line
nnoremap j gj
nnoremap k gk

" clear highlighting
nmap <silent> ,/ :nohlsearch<CR>

" clean trailing whitespace
map <silent><leader>\ :%s/\s\+$//<CR>:let @/=''<CR>

" show loaded scripts
nmap <silent> <leader>sn :scriptnames<CR>

" for when you forgot sudo
cmap w!! w !sudo tee % >/dev/null

nmap <leader>w :w!<cr>
nmap <leader>fq :q!<cr>

" for reloading
nmap <leader>rw :redraw!<cr>

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

"folding
set foldmethod=indent
set foldlevel=10
if $TMUX == ''
    set clipboard+=unnamed
endif
" use spacebar to fold
nnoremap <space> za

" window movements
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-l> <c-w>l
" nnoremap <c-h> <c-w>h

" Cancel search with escape
" this is commented so that files don't start in replace mode
" nnoremap <silent> <Esc> :nohlsearch<Bar>:echo<CR>
nnoremap <esc><esc> :nohl<cr>

" Open the last file
nnoremap <Leader><Leader> :e#<CR>

"keep selection after intending (thank goodness)
"gv means select what you last selected
vnoremap < <gv
vnoremap > >gv

" nextval
nnoremap <Leader>+ <Plug>nextvalInc
nnoremap <Leader>- <Plug>nextvalDec

" airline
set laststatus=2
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
" Use this theme:
let g:airline_theme='luna'
let g:airline_powerline_fonts = 1
" airline end

" gutentags Don't pollute project dirs
let g:gutentags_ctags_exclude = ['venv', 'build', 'static', 'node_modules']
let g:gutentags_ctags_exclude_wildignore = 0
let g:gutentags_ctags_tagfile = '.tags'
" gutentags end

" set vim default tags file name `tags` to `.tags`
set tags=./.tags;,.tags

" Ag settings
" No carrage return at the end so we can actually search
" :help key-notation
nnoremap <leader>a :Ag<Space>
let g:ag_highlight=1

" html5 settings
let g:html5_event_handler_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_rdfa_attributes_complete = 1
let g:html5_aria_attributes_complete = 1

"emmet settings
let g:user_emmet_leader_key = '<c-e>'
let g:user_emmet_mode='a'
let g:user_emmet_expandabbr_key='<c-e>'
let g:use_emmet_complete_tag=1

" python-mode (pymode)
let g:pymode_lint_ignore="E501"
let g:pymode_virtualenv = 1
let g:pymode_lint = 0

let g:pymode_rope = 0

" let g:pymode_options = 0
" let g:pymode_options_max_line_length = 99
" let g:pymode_options_colorcolumn = 1
" let g:pymode_indent = 1
" let g:pymode_foliding = 1
" let g:pymode_lint_on_write = 0
" let g:pymode_lint_message = 0
let g:pymode_rope = 0 " no rope
let g:pymode_utils_whitespaces = 1 " auto-remove whitespace
let g:pymode_indent = 1 " indent
let g:pymode_syntax = 1 " pymode syntax
let g:pymode_syntax_all = 1 " highlight everything
let g:pymode_syntax_print_as_function = 0 " highlight print
let g:pymode_syntax_indent_errors = g:pymode_syntax_all " highlight indentation errors
let g:pymode_syntax_space_errors = g:pymode_syntax_all " highlight trailing spaces
let g:pymode_syntax_string_formatting = g:pymode_syntax_all " highlight string formatting
let g:pymode_syntax_string_format = g:pymode_syntax_all " string formatting
let g:pymode_syntax_string_templates = g:pymode_syntax_all " string template syntax
let g:pymode_syntax_doctests = g:pymode_syntax_all " doctests
let g:pymode_syntax_builtin_objs = g:pymode_syntax_all " builtins objs
let g:pymode_syntax_builtin_funcs = g:pymode_syntax_all " builtin funcs
let g:pymode_syntax_highlight_exceptions = g:pymode_syntax_all " builtin exceptions
let python_highlight_all=1 " highlight

" Ale
let g:ale_sign_column_always = 1
let g:ale_completion_enabled = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
" Ale Python
" https://blog.landscape.io/using-pylint-on-django-projects-with-pylint-django.html
let g:ale_python_pylint_options = '--load-plugins pylint_django'
" Ale-Airline
let g:airline#extensions#ale#enabled = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚠'

let g:ale_linters = {
\  'python': ['mypy', 'flake8', 'pylint-django', 'black', 'pylint'],
\  'javascript': ['eslint'],
\  'css': ['stylelint'],
\  'jsx': ['stylelint', 'eslint']
\}
let g:ale_linter_aliases = {
  \'jsx': 'css'
\}
let g:ale_fixers = {
\  'python': ['isort'],
\  'javascript': ['eslint'],
\}
" Ale end


"Ctrlp
"https://medium.com/a-tiny-piece-of-vim/making-ctrlp-vim-load-100x-faster-7a722fae7df6
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

"fzf------------------------------------------------------------
map <C-p> :FZF<CR>
let $FZF_DEFAULT_COMMAND= 'ag -g ""'
let g:fzf_action = {
      \'ctrl-t': 'tab split',
      \'ctrl-v': 'vsplit',
      \'ctrl-x': 'split',
      \ 'ctrl-a': 'argedit'
  \}
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_buffers_jump = 1
let g:fzf_layout = {"up":'~40%'}
nnoremap <c-p><c-p> :Files<CR>
nnoremap <c-p><c-f> :call <SID>fzf('find -L . -type f ! -path "*.hg/*" ! -path "*.git/*"', ':Files') <CR>
nnoremap <c-p><c-a> :call <SID>fzf('find -L . -type f', ':Files') <CR>
nnoremap <c-p><c-g> :GitFiles<CR>
"nnoremap <c-p><c-g>? :GitFiles?<CR>
nnoremap <c-p><c-b> :Buffers<CR>
"nnoremap <c-p><c-c> :Colors<CR>
"nnoremap <c-p><c-a> :Ag<CR>
"nnoremap <c-p><c-l> :Lines<CR>
nnoremap <c-p><c-l> :BLines<CR>
nnoremap <c-p><c-t> :Tags<CR>
nnoremap <c-p><c-j> :BTags<CR>
autocmd! FileType cpp  nnoremap <buffer> <c-p><c-j> : call <SID>fzf_cpp_tags()<CR>
"nnoremap <c-p><c-j> :BTags<CR>
"nnoremap <c-p><c-m> :Marks<CR>
nnoremap <c-p><c-w> :Windows<CR>
"nnoremap <c-p><c-l> :Locate<CR>
nnoremap <c-p><c-h> :History<CR>
"nnoremap <c-p><c-;> :History:<CR>
"nnoremap <c-p><c-/> :History/<CR>
nnoremap <c-p><c-s> :Snippets<CR>
"nnoremap <c-p><c-c> :Commits<CR>
"nnoremap <c-p><c-b>c :BCommits<CR>
nnoremap <c-p><c-c> :Commands<CR>
nnoremap <c-p><c-m> :Maps<CR>
command! -nargs=* -complete=file Ae :call s:fzf_ag_expand(<q-args>)

"nnoremap <c-p>h :Helptags<CR>
"nnoremap <c-p>f :Filetypes<CR>

"command! -nargs=* -complete=file AA :call s:fzf_ag_raw(<q-args>)
autocmd! VimEnter * command! -nargs=* -complete=file Ag :call s:fzf_ag_raw(<q-args>)

let s:fzf_btags_cmd = 'ctags -f - --sort=no --excmd=number --c++-kinds=+p '
let s:fzf_btags_options = {'options' : '--reverse -m -d "\t" --with-nth 1,4.. -n 1,-1 --prompt "BTags> "'}
function! s:fzf_cpp_tags()
call fzf#vim#buffer_tags(
      \ "",[s:fzf_btags_cmd . expand('%:S')],
      \ extend(copy(g:fzf_layout), s:fzf_btags_options))
endfunction

function! s:fzf(fzf_default_cmd, cmd)
  let oldcmds = $FZF_DEFAULT_COMMAND | try
    let $FZF_DEFAULT_COMMAND = a:fzf_default_cmd
    execute a:cmd
  finally | let $FZF_DEFAULT_COMMAND = oldcmds | endtry
endfunction

function! s:fzf_ag_raw(cmd)
  call fzf#vim#ag_raw('--noheading '. a:cmd)
endfunction

" some path is ignored by git or hg, i need to use absolute path to avoid that.
function! s:fzf_ag_expand(cmd)
  let matches = matchlist(a:cmd, '\v(.{-})(\S*)\s*$')
  " readlink, remove trailing linebreak
  let ecmd = matches[1] . system("readlink -f " . matches[2])[0:-2]
  call s:fzf_ag_raw(ecmd)
endfunction

" end fzf

" Plug.vim
nnoremap <Leader>pu :PlugUpdate<CR>
nnoremap <Leader>pc :PlugClean<CR>
nnoremap <Leader>pi :PlugInstall<CR>
nnoremap <Leader>ps :PlugStatus<CR>



"GitGutter - this substantially makes git gutter much faster
set updatetime=100
set signcolumn=yes " always show the column, so vim doesn't resize
let g:gitgutter_max_signs = 100  " 500 default value


" http://vim.wikia.com/wiki/Simplifying_regular_expressions_using_magic_and_no-magic
nnoremap / /\v
nnoremap s/ s/\v
nnoremap %s/ %s/\v
vnoremap / /\v
vnoremap %s/ %s/\v


"F2 spell check
nnoremap <F2> :set spell<CR>

" Paste mode with visual indication
" set pastetoggle=<F2>
" No longer needed with bracketed paste plugin: https://github.com/ConradIrwin/vim-bracketed-paste

" Be able to keep pasting the same thing... hack that re-yanks the text each time
xnoremap p pgvy

set showmode

" Seems to speed up scrolling
set regexpengine=1

" fix capitol writing combos, when I don't unpress shift fast enough
command! W w
command! Wq wq
command! Q q
command! Bd bd
command! BD bd

" range select
command! -range Vis call setpos('.', [0,<line1>,0,0]) |
                    \ exe "normal V" |
                    \ call setpos('.', [0,<line2>,0,0])

" colorscheme oceandeep  " Default
colorscheme Atelier_CaveDark

" file based stuff
au BufNewFile,BufRead *.groovy,*.gradle setf groovy
autocmd! BufEnter,BufNewFile *.groovy,*.java,*.gradle,*.scala,*.sbt colo elflord
autocmd! BufLeave *.groovy,*.java,*.gradle,*.scala,*.sbt colo oceandeep


" JavaScript
au FileType javascript setlocal foldmethod=marker
au FileType javascript setlocal foldmarker={,}


"powerline
set rtp+=$DOTDOT/vim/vim/bundle/powerline/powerline/bindings/vim

" close quick/location fix/list
nnoremap <leader>l :lcl<CR>
" next/prev quicklist item
" nmap <c-b> :cprevious<CR>
" nmap <c-n> :cnext<CR>

" http://vim.wikia.com/wiki/Using_vim_color_schemes_with_Putty
if &term =~ "xterm"
    " 256 color --
    let &t_Co=256
    " restore screen after quitting
    set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
    if has("terminfo")
        let &t_Sf="\ESC[3%p1%dm"
        let &t_Sb="\ESC[4%p1%dm"
    else
        let &t_Sf="\ESC[3%dm"
        let &t_Sb="\ESC[4%dm"
    endif
endif


" allows cursor change in tmux mode
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Django filetypes
au BufNewFile,BufRead admin.py     setlocal filetype=python.django
au BufNewFile,BufRead urls.py      setlocal filetype=python.django
au BufNewFile,BufRead models.py    setlocal filetype=python.django
au BufNewFile,BufRead views.py     setlocal filetype=python.django
au BufNewFile,BufRead settings.py  setlocal filetype=python.django
au BufNewFile,BufRead forms.py     setlocal filetype=python.django
au BufNewFile,BufRead *.html setlocal filetype=htmldjango


" Omni completion
" autocmd FileType python set omnifunc=pythoncomplete#Complete
" autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" autocmd FileType css set omnifunc=csscomplete#CompleteCSS

" au FileType htmldjango set omnifunc=htmldjangocomplete#CompleteDjango
" au FileType htmldjango inoremap {% {% %}<left><left><left>
" au FileType htmldjango inoremap {{ {{ }}<left><left><left>


" Completor
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>\<cr>" : "\<cr>"

" let g:completor_auto_trigger = 0
" inoremap <expr> <Tab> pumvisible() ? "<C-N>" : "<C-R>=completor#do('complete')<CR>"

" set custom indentation
let g:scala_sort_across_groups=1
let g:scala_first_party_namespaces='\(controllers\|views\|models\|modules\|util.\|gov.\)'
" au FileType html,handlebars.html,htmldjango,css,scsshp,twig,javascript setlocal sts=2 sw=2 et

" Don't bother with newlines for text-based files (but keep for others)
au FileType html,css,markdown,htmldjango,scsshp,txt setlocal binary noeol
if exists("nofixeol") " only for versions 7.4.785 and later (http://vim.wikia.com/wiki/Do_not_auto-add_a_newline_at_EOF)
    au FileType html,css,markdown,htmldjango,scsshp,txt setlocal binary noeol nofixeol
endif

" " Moving between buffers
" map <C-Tab> :bnext<cr>
" map <C-S-Tab> :bprevious<cr>

" au FileType scala syn region foldImports start="import" end=/import.*\n^$/ fold keepend


" Markdown
" " Goyo
function! s:auto_goyo()
    if &ft == 'markdown' && winnr('$') == 1
        Goyo 80
        NumbersToggle
    elseif exists('#goyo')
        Goyo!
    endif
endfunction

function! s:goyo_leave()
    if winnr('$') < 2
        silent! :q
    endif
endfunction

augroup goyo_markdown
    autocmd!
    autocmd BufNewFile,BufRead * call s:auto_goyo()
    autocmd! User GoyoLeave nested call goyo_leave()
augroup END

autocmd BufNewFile,BufReadPost *.md set filetype=markdown

" Spell check
setlocal spell
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline

" Comment italics - tho depends on colorscheme
highlight Comment cterm=italic
