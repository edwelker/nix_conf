" An example for a vimrc file.


" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible " don't need vi compatibility

" pathogen for plugin loading, but turn off filetype first, so it loads correctly
filetype off
call pathogen#infect()
call pathogen#helptags()

" remap the leader key.  typically \, but , is easier
let mapleader=","

" set timeout before leader key is executed
set timeoutlen=1

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" learn to do it correctly
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>


" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

"tell vim where the tags are
:set tags+=.tags


" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


" Only do this part when compiled with support for autocommands.
if has("autocmd")

    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype on
    filetype indent plugin on

    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
    au!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

    augroup END

    " whitespace characters displayed
    set list
    set listchars=tab:>.,trail:.,extends:#,nbsp:.

    autocmd filetype html,xml set listchars-=tab:>.

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

set number    "show line numbers
syntax on     "show syntax highlighting
set ai sw=4
set encoding=utf8
set paste
set expandtab
set textwidth=0
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set ignorecase
set wildmenu
set commentstring=\ #\ %s
set hidden

"folding
set foldmethod=indent
set foldlevel=99
set clipboard+=unnamed

"window movements
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"keep selection after intending (thank goodness)
"gv means select what you last selected
vnoremap < <gv
vnoremap > >gv

"set a temporary directory
set backupdir=~/.tmp

"emmet settings
let g:user_emmet_leader_key = '<c-e>'
let g:user_emmet_mode='a'
let g:user_emmet_expandabbr_key='<c-e>'
let g:use_emmet_complete_tag=1
let g:user_emmet_mode='a'

" python-mode (pymode)
let g:pymode_options_max_line_length = 119
let g:pymode_virtualenv = 1
let g:pymode_lint = 0

"syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1

let g:syntastic_loc_list_height=5

let g:syntastic_python_checkers = ['pylint', 'flake8']
let g:syntastic_python_flake8_post_args='--ignore=W291,W293,E265,E127,E128 --max-line-length=119'
let g:syntastic_python_pylint_post_args='--disable=line-too-long'

let g:syntastic_javascript_checkers = ['jshint']

"F2 spell check
nnoremap <F2> :set spell<CR>

set pastetoggle=<F3>

" fix capitol writing combos, when I don't unpress shift fast enough
command WQ wq
command Wq wq
command W w
command Q q


" file based stuff
au BufNewFile,BufRead *.groovy,*.gradle setf groovy

colo oceandeep  "default
autocmd! BufEnter,BufNewFile *.groovy,*.java,*.gradle colo elflord 
autocmd! BufLeave *.groovy,*.java,*.gradle colo oceandeep 


"powerline
set rtp+=$DOTDOT/vim/vim/bundle/powerline/powerline/bindings/vim



" http://vim.wikia.com/wiki/Using_vim_color_schemes_with_Putty
if &term =~ "xterm"
    "256 color --
    let &t_Co=256
    " restore screen after quitting
    set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
    if has("terminfo")
        let &t_Sf="\ESC[3%p1%dm"
        let &t_Sb="\ESC[4%p1%dm"
    else
        let &t_Sf="\ESC[3%dm"
        let &t_Sb="\ESC[4%dm"
    endif
endif

" http://nvie.com/posts/how-i-boosted-my-vim/ need to look at this
