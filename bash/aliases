alias rebash="source ~/.bashrc; echo -e '\nBash config reloaded'"
alias aliases="vi ${DOTDOT}/bash/aliases && source ~/.bashrc"
alias galiases="vi ${DOTDOT}/git/gitconfig && source ~/.bashrc"
alias envs="vi ${DOTDOT}/bash/env && source ~/.bashrc"
alias dotdot="cd ${DOTDOT}"

alias c="clear"

alias l='ls'
alias ls='ls -GF'
alias ll='ls -hlF'
alias la='ls -alF'
alias lt='ls -to'
alias lal='ls -al | less'
alias lsd='ls -d */'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias md='mkdir -p'

alias pd="pushd"
alias pd1="pushd +1"
alias pd2="pushd +2"
alias dirs='dirs -v'

alias h='history'

alias py='python'
alias py3='python3'
alias ma='python manage.py'
alias rs='python manage.py runserver'
alias shell='python manage.py shell_plus'
alias db='python manage.py dbshell'

alias nz='nosetests'
alias pip-upgrade="pip install --upgrade"
alias pip-old="pip list -o"
alias pip-local="egrep -v -f ${DOTDOT}/requirements.txt"

alias findhere='find . -iname'
alias findhome='find ~ -iname'
alias findeverywhere='find / -iname'
alias f='egrep -ir * -e'

alias hi='pygmentize -f console256 -g'

alias t='tmux'
alias ta='tmux attach -t'
alias tn='tmux new-session -s'
alias tl='tmux list-sessions'
alias td='tmux detach'
alias tk='tmux kill-session -t'

alias w='w -s'

alias os='cat /etc/*-release'
alias kernel='uname -a'

alias error_tail='tail -n 40 /web/public/logs/error'

alias work="~/bin/work.sh"
alias iweb="cd ~/iwebdev-welkere"

alias g='git'
alias gp='git push'
alias gpp='git pull && git push'
alias ginitpy="git init --template=${DOTDOT}/pygittemplate"
alias b='bzr'

#stolen from elsewhere : https://gist.github.com/aliang/1024466
# SSH Auto Completion of Remote Hosts
_complete_ssh_hosts ()
{
COMPREPLY=()
cur="${COMP_WORDS[COMP_CWORD]}"
comp_ssh_hosts=`cat ~/.ssh/known_hosts | \
cut -f 1 -d ' ' | \
sed -e s/,.*//g | \
grep -v ^# | \
     uniq | \
     grep -v "\[" ;
cat ~/.ssh/config | \
        grep "^Host " | \
        awk '{print $2}'
        `
        COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- $cur))
        return 0
        }
complete -F _complete_ssh_hosts ssh

#http://www.bit-integrity.com/2011/08/vim-syntax-highlighting-with-less.html
VLESS=$(find /usr/share/vim -name 'less.sh')
if [ ! -z $VLESS ]; then
  alias less=$VLESS
fi

lsa(){
    egrep ${DOTDOT}/bash/aliases -e 'alias' | awk '{$1=""; print $0}'
}

lastcommand(){
    h | tail -n 2 | head -n 1 | awk '{$1=""; $2=""; print $0}' | sed -e 's/^ *//' 
}
alias savelastcommand='lastcommand >'

#openshift
alias rh='rhc'
alias rht='rhc tail'
alias rhe='rhc env'
alias rhse='rhc set-env'
alias rhls='rhc apps'

# aws stuff

# aws_cli
aws_cli(){
if [ ! -d ~/.env/awscli ]
then
    $(which virtualenv) ~/.env/awscli
    . ~/.env/awscli/bin/activate
    $(which pip) install awscli
    complete -C aws_completer aws
    aws configure
    echo "awscli virtualenv installed and activated. Type 'deactivate' to exit. Type 'aws_cli' to reactivate."
else
    . ~/.env/awscli/bin/activate
    complete -C aws_completer aws
    echo "awscli virtualenv activated. Type 'deactivate' to exit. Type 'aws_cli' to reactivate."
fi
}

# awsec2create
aws_ec2_create(){
if [ $# -ne 2 ]
then
    echo "Usage: aws_ec2_create {aws image ami (ami-xxxxxxxx)} {privatekeyname (without .pem suffix)}"
else
    aws ec2 run-instances --associate-public-ip-address --image-id $1 --security-group-ids sg-2d9dea48 --instance-type m3.medium --subnet-id subnet-958579e2 --count 1 --key-name $2 >> aws_instance_created_$(date +%F)_$1.json
fi
}
aws_get_instance_from_json(){
if [ $# -ne 1 ]
then
    echo "Usage: aws_get_instance_from_json {aws_instance_created*.json file}"
else
    grep "InstanceId" $1 | awk '{ print $2 }' | sed -e 's/"//' -e 's/",//'
fi
}
aws_get_instance_data(){
if [ $# -ne 1 ]
then
    echo "Usage: aws_get_instance_data {aws instance-id (i-xxxxxxxx)}"
else
    aws ec2 describe-instances --instance $1
fi
}
aws_set_instance_name(){
if [ $# -ne 2 ]
then
    echo "Usage: aws_set_instance_name {aws instance-id (i-xxxxxxxx)} {desired_instance_name}"
else
    aws ec2 create-tags --resources $1 --tags Key=Name,Value=$2
fi
}
aws_set_instance_tag(){
if [ $# -ne 3 ]
then
    echo "Usage: aws_set_instance_tag {aws instance-id (i-xxxxxxxx)} {tagKey} {tagValue}"
else
    aws ec2 create-tags --resources $1 --tags Key=$2,Value=$3
fi
}
aws_get_instance_public_ip(){
if [ $# -ne 1 ]
then
    echo "Usage: aws_get_instance_public_ip {aws instance-id (i-xxxxxxxx)}"
else
    aws_get_instance_data $1 | grep "PublicIpAddress" | awk '{print $2}' | sed -e 's/^"//' -e 's/",//'
fi
}

#modify ssh config too!
