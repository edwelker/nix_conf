# believe it or not, this needs to be vim, not vi, for crontab -e to work on a mac
export VISUAL=vim
export EDITOR="$VISUAL"
export PAGER="bat"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export LESS="-R"
export TERM=xterm-256color
export CDPATH=.:~:/export/home/welkere/:~/code:~/code/python:~/code/scala:~/code/css:~/src:~/bin:$DOTDOT:/am/intrawebdev2/web/public/htdocs/staff/welkere/
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/lib
export HISTIGNORE="clear" # Ignore clear, since I type that constantly
export HISTTIMEFORMAT="%y-%m-%dT%T "
export HISTSIZE=3000 # 3000 per session
export HISTFILESIZE=800000 # 800,000 across all sessions
export HISTCONTROL=ignoredups:erasedups # Ignore cmds starting with whitepsace, and duplicates
export RIPGREP_CONFIG_PATH=$DOTDOT/ripgreprc

export PIP_DOWNLOAD_CACHE=$HOME/.cache/pip

. ${DOTDOT}/bash/java.sh
. ${DOTDOT}/bash/go.sh
. ${DOTDOT}/bash/scala.sh
. ${DOTDOT}/bash/node.sh
. ${DOTDOT}/bash/python.sh
. ${DOTDOT}/bash/ruby.sh
. ${DOTDOT}/bash/extras.sh

# with host PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[0;33m\] \[\033[00m\]\$ '
PS1='\[\033[01;32m\]\u:\[\033[01;34m\]\w\[\033[0;33m\] \[\033[00m\]\$ '

#because I hit ctrl-s all the time
stty ixany
stty ixoff -ixon

#because I occasionally kill shells by Ctrl+d, don't send eof.
set -o ignoreeof

if command -v dnsdomainname 1>/dev/null && [[ $(dnsdomainname 2>/dev/null) =~ ^.*ncbi.*$ ]]; then
    CDPATH=$CDPATH:/net/iwebdev2/export/home/web/private/htdocs/staff/welkere
    export CDPATH;

    export TMPDIR=/tmp

    export PATH=/usr/local/python/all/bin:"$PATH"
    if [ -f ${DOTDOT}/bash/ncbi ]; then
        . ${DOTDOT}/bash/ncbi
    else
        echo "NCBI config not found."
    fi
fi

if [ -f /usr/bin/dircolors ]
  then
    export LS_OPTIONS='-F --color=auto'
    eval `dircolors`
    alias ls='ls $LS_OPTIONS'

    alias grep='grep --color=auto'
fi

shopt -s histappend
export PROMPT_COMMAND='history -a'
export HISTSIZE=30000

PATH=~/bin:$DOTDOT/bin:$PATH
export PATH

if [ -d /usr/local/bin/ ];then
    export PATH=/usr/local/bin:$PATH
fi

# homebrew sbin
which -s brew 2> /dev/null
if [[ $? = 0 ]] ; then
    export PATH="/usr/local/sbin:$PATH"
fi


[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[ -f ~/src/ripgrep/complete/rg.bash ] && source ~/src/ripgrep/complete/rg.bash;
[ -f ~/src/fd/autocomplete/fd.bash-completion ] && source ~/src/fd/autocomplete/fd.bash-completion
# won't work, relies on https://github.com/scop/bash-completion which i need to look into
# [ -f ~/src/bat/autocomplete/bat.bash ] && source ~/src/bat/autocomplete/bat.bash;

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

#completion
#TODO: clean up these three identical if statements
if [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
fi

if [ -d /etc/bash_completion.d/ ]; then
   source /etc/bash_completion.d/git
   # source /etc/bash_completion.d/yum
   # support the `g` alias for git
   complete -o default -o nospace -F _git g
   __git_complete g __git_main
fi

# mac with homebrew
if [ -x "$(command -v brew)" ] && [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
   # support the `g` alias for git
    __git_complete g __git_main
fi

if [ -f ${DOTDOT}/git/git-prompt.sh ]; then
    . ${DOTDOT}/git/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=true
    PS1='\[\033[01;32m\][\!] \u:\[\033[01;34m\]\w\[\033[0;33m\] \[\033[0;33m\]$(__git_ps1 "(%s)") \[\033[00m\]\$ '
fi

#aws completion
if [ -x $(which aws_completer 2>/dev/null) ]; then
    complete -C aws_completer aws
fi

#http://tychoish.com/rhizome/9-awesome-ssh-tricks/
#ssh-agent runs per-session, so tmux can't always find it.
#don't re-run, just find the real one
ssh-reagent () {
    for agent in $TMPDIR/ssh-*/agent.*; do
        export SSH_AUTH_SOCK=$agent
        if ssh-add -l 2>&1 > /dev/null; then
            echo Found working SSH Agent:
            ssh-add -l
            return  # after the first one found, exit the for loop
        fi
    done
    echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

function ssh-agent-hookup (){
  if [ -n "$SSH_AUTH_SOCK" ]; then return; fi; # already have an ssh agent
        local pids pid;
        pids=$(pgrep -u $LOGNAME $(basename $SHELL))
        # if there are no bash processes, then create an ssh-agent
        if [ "$pids" = "" ]; then
                eval `ssh-agent -s`
                return;
        fi;
        for pid in $pids; do
                if [ -e /proc/$pid/environ ] && strings /proc/$pid/environ | egrep -q ^SSH_AUTH_SOCK; then
                        echo Found a working agent
                        export $(strings /proc/$pid/environ|egrep ^SSH_AUTH_SOCK)
                        if ssh-add -l 2>&1 > /dev/null; then
                            echo Found working SSH Agent:
                            ssh-add -l
                            # found one, instead return
                        fi
                        return;
                fi
        done
        eval `ssh-agent -s`
        return
}

#for xforwarding
#see http://brainscraps.wikia.com/wiki/Extreme_Multitasking_with_tmux_and_PuTTY
update_display() {
    good_display=$(netstat -an | /bin/grep 0\ [0-9,:,.]*:60..\  | awk '{print $4}' | tail -n 1)
    good_display=${good_display: -2}
    export DISPLAY=${HOSTNAME}:${good_display}.0
}

export PS1

ea(){
    env | ag $*
}

#. ${DOTDOT}/vim/vim/bundle/powerline/powerline/bindings/bash/powerline.sh

# terminfo, italics, https://sookocheff.com/post/vim/italics/
if [ ! -d $HOME/.terminfo ]; then
    mkdir $HOME/.terminfo
    tic -o $HOME/.terminfo $DOTDOT/terminfo/tmux.terminfo
    tic -o $HOME/.terminfo $DOTDOT/terminfo/tmux-256color.terminfo
    tic -o $HOME/.terminfo $DOTDOT/terminfo/xterm-256color.terminfo
fi
